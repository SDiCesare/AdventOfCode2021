[ITALIANO]
L'approccio, lungo seppur funzionante, nell'idea di codificare l'input in arrivo, si sviluppa su più fasi:

1) Innanzitutto inserisco all'interno della mia matrice rappresentativa della codifica delle singole cifre, i valori con codifica segmenti<->segnale univoca, ossia l'1, il 4, il 7 e l'8.
2) Dopo di che controllo i valori con codifica segmenti<->segnale di segmenti=6.
   Per verificare se la sequenza rappresenta un 6, controllo quanti segnali ha in comune con i segnali del 7. Se ne ha solo 2, significa che è il 6.
   Per verificare se la sequenza rappresenta uno 0, controllo quanti segnali ha in comune con i segnali del 4. Se ne ha solo 3, significa che è uno 0.
   Se nessuna delle due condizioni precedenti viene soddisfatta, significa che ho a che fare con una sequenza rappresentativa del 9, dato che è l'unico numero rimasto rappresentabile con 6 segnali.
3) Infine passo a controllare i valori con codifica segmenti<->segnale di segmenti=5.
   Per verificare se la sequenza rappresenta un 3, controllo quanti segnali ha in comune con i segnali dell'1. Se ne ha 2, significa che è un 3.
   Per verificare se la sequenza rappresenta un 5, controllo quanti segnali ha in comune con i segnali del 4. Se ne ha 3, significa che è un 5.
   Se nessuna delle due condizioni precedenti viene soddisfatta, significa che ho a che fare con una sequenza rappresentativa del 2, dato che è l'unico numero rimasto rappresentabile con 5 segnali.
4) Una volta che ho tutti i numeri con la loro codifica segnali assegnata, passo a controllare quali segnali corrispondono a quali segmenti:
   a) Verifico quale segnale è assente tra quelli del 6. Il segnale assente è la codifica segmento<->segnale al segmento 2.
   b) Verifico quale segnale è assente tra quelli del 9. Il segnale assente è la codifica segmento<->segnale al segmento 4.
   c) Verifico quale segnale è assente tra quelli dello 0. Il segnale assente è la codifica segmento<->segnale al segmento 3.
   d) Controllo quale segnale è presente nel 7, ma non nel 4. Il segnale rimanente tra i 3 del 7, è quello per la codifica segmento<->segnale al segmento 0.
   e) Controllo quale segnale del 2 è assente nella mia attuale codifica. Il segnale assente è la codifica segmento<->segnale al segmento 6.
   f) Controllo quale segnale del 3 è assente nella mia attuale codifica. Il segnale assente è la codifica segmento<->segnale al segmento 5.
   g) Controllo quale sodifica segmento<->segnale è assente nella mia attuale, rappresenta l'ultima codifica segmento<->segnale al segmento 1.
5) Codifico gli output come numeri, ed infine li sommo assieme per ottenere il risultato.

[ENGLISH]
The approach, long although functional, in the idea of encoding the incoming input, develops over several phases:

1) First of all I insert within my matrix representing the encoding of the single digits, the values with encoding segments <-> unique signal, that is 1, 4, 7 and 8.
2) After that I check the values with coding segments <-> segment signal = 6.
   To see if the sequence represents a 6, I check how many signals it has in common with the signals of 7. If it only has 2, it means that it is 6.
   To check if the sequence represents a 0, I check how many signals it has in common with the signals of 4. If it only has 3, it means that it is a 0.
   If neither of the previous two conditions is satisfied, it means that I am dealing with a representative sequence of 9, since it is the only number left that can be represented with 6 signals.
3) Finally, I check the values with coding segments <-> segments signal = 5.
   To see if the sequence represents a 3, I check how many signals it has in common with the signals of 1. If it has 2, it means it's a 3.
   To see if the sequence represents a 5, I check how many signals it has in common with the signals of 4. If it has 3, it means that it is a 5.
   If neither of the previous two conditions is satisfied, it means that I am dealing with a representative sequence of 2, since it is the only number left that can be represented with 5 signals.
4) Once I have all the numbers with their assigned signal encoding, I check which signals correspond to which segments:
   a) I check which signal is absent among those of 6. The absent signal is the encoding segment <-> signal at segment 2.
   b) I check which signal is absent among those of 9. The absent signal is the encoding segment <-> signal at segment 4.
   c) I check which signal is absent among those of 0. The absent signal is the encoding segment <-> signal at segment 3.
   d) Check which signal is present in the 7, but not in the 4. The remaining signal between the 3 of the 7, is the one for the encoding segment <-> signal at segment 0.
   e) I check which signal of 2 is absent in my current encoding. The absent signal is the encoding segment <-> signal at segment 6.
   f) I check which signal of 3 is absent in my current encoding. The absent signal is the encoding segment <-> signal at segment 5.
   g) Check which soda segment <-> signal is absent in my current one, represents the last coded segment <-> signal at segment 1.
5) I encode the outputs as numbers, and finally add them together to get the result.
